name: CI
on: { pull_request: { } }
concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true
permissions:
  checks: write
  pull-requests: write
  packages: write
jobs:
  setup-build:
    runs-on: ubuntu-latest
    outputs:
      tox_lint_envs: ${{ steps.list_envs.outputs.tox_lint_envs }}
    steps:
      - uses: actions/checkout@v5

      - uses: ./.github/actions/setup-python-environment
        with:
          install_dependencies: false

      - id: list_envs
        run: |
          tox_lint_envs=$(
            tox --listenvs | \
            grep -Ev '^test-' | \
            jq -Rnc '[inputs | sub("\\.yml$"; "")]'
          )
          echo "tox_lint_envs=${tox_lint_envs}" >> $GITHUB_OUTPUT

  execute-lint:
    runs-on: ubuntu-latest
    needs: [setup-build]
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.setup-build.outputs.tox_lint_envs) }}
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5

      - uses: ./.github/actions/setup-python-environment

      - name: Run tox target
        run: poetry run tox --current-env -e ${{ matrix.target }}
        env:
          PYTEST_ADDOPTS: --junit-xml=test-results.xml

      - name: Check for test results
        id: check_artifacts
        run: |
          if [ -f "test-results.xml" ]; then echo "have_test_results=1" >> $GITHUB_OUTPUT; fi
        if: success() || failure()

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: test-results.xml
          check_name: pytest report (${{ matrix.target }})
          check_annotations: true
          job_summary: true
          detailed_summary: true
          flaky_summary: true
          updateComment: true
          fail_on_failure: false
        if: steps.check_artifacts.outputs.have_test_results == '1' && (success() || failure())

  build-container:
    runs-on: ubuntu-latest
    needs: [setup-build]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5

      - name: Build container
        run: |
          docker run \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workspace -w /workspace \
            buildpacksio/pack build \
            --builder heroku/builder:24 \
            ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Authenticate to ghcr.io
        run: |
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Publish container
        shell: bash
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ github.sha }}
